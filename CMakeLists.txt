cmake_minimum_required(VERSION 3.19)
project(src)

set(CMAKE_CXX_STANDARD 14)
set(FIND_HDF_COMPONENTS C CXX shared)
set(ENV{HDF5_DIR} /Applications/HDF_Group/HDF5/1.10.7/share/cmake/hdf5)
#set(CMAKE_IGNORE_PATH /Applications/anaconda3/lib)
# OpenMP setup follows https://stackoverflow.com/questions/46414660/macos-cmake-and-openmp
#set(CMAKE_C_COMPILER "/usr/local/Cellar/llvm/12.0.1/bin/clang")
#set(CMAKE_CXX_COMPILER "/usr/local/Cellar/llvm/12.0.1/bin/clang++")
#set(CMAKE_CXX_FLAGS "-mlinker-version=450")
#set(CMAKE_C_FLAGS "-mlinker-version=450")
#set(OPENMP_LIBRARIES "/usr/local/Cellar/llvm/12.0.1/lib")
#set(OPENMP_INCLUDES "/usr/local/Cellar/llvm/12.0.1/include")
#set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lpthread")

# Find OpenMP
#if(APPLE)
#    if(CMAKE_C_COMPILER_ID MATCHES "Clang")
#        set(OpenMP_C "${CMAKE_C_COMPILER}")
#        set(OpenMP_C_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
#        set(OpenMP_C_LIB_NAMES "libomp" "libgomp" "libiomp5")
#        set(OpenMP_libomp_LIBRARY ${OpenMP_C_LIB_NAMES})
#        set(OpenMP_libgomp_LIBRARY ${OpenMP_C_LIB_NAMES})
#        set(OpenMP_libiomp5_LIBRARY ${OpenMP_C_LIB_NAMES})
#    endif()
#    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
#        set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
#        set(OpenMP_CXX_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
#        set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
#        set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
#        set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
#        set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
#    endif()
#endif()

find_package (Eigen3 3.3 REQUIRED NO_MODULE)
find_package(OpenMP)
find_package (HDF5 NAMES "hdf5" COMPONENTS ${FIND_HDF_COMPONENTS})

if (HDF5_FOUND)
    if (HDF5_shared_C_FOUND)
        set (LINK_LIBS ${LINK_LIBS} ${HDF5_C_SHARED_LIBRARY})
    endif ()
    if (HDF5_shared_CXX_FOUND)
        set (LINK_LIBS ${LINK_LIBS} ${HDF5_CXX_SHARED_LIBRARY})
    endif ()
else ()
    message (FATAL_ERROR " HDF5 is Required")
endif ()

INCLUDE_DIRECTORIES (${HDF5_INCLUDE_DIR})
INCLUDE_DIRECTORIES(extern/)

add_executable(Baysis src/models.cpp src/filterschemes.cpp src/accumulator.cpp src/h5bridge.cpp src/baysis.cpp)
add_executable(datagen src/models.cpp src/filterschemes.cpp src/accumulator.cpp src/h5bridge.cpp src/datagen.cpp)
add_executable(Kalman src/models.cpp src/filterschemes.cpp src/accumulator.cpp src/h5bridge.cpp src/kalman.cpp)
add_executable(Testing tests/testing.cpp)
if(OpenMP_CXX_FOUND)
    target_link_libraries(src OpenMP::OpenMP_CXX)
endif()
target_link_libraries (Baysis Eigen3::Eigen)
target_link_libraries(datagen Eigen3::Eigen)
target_link_libraries(Kalman Eigen3::Eigen)
target_link_libraries(Testing Eigen3::Eigen)
target_link_libraries (Baysis ${LINK_LIBS})
target_link_libraries (datagen ${LINK_LIBS})
target_link_libraries (Kalman ${LINK_LIBS})
target_link_libraries (Testing ${LINK_LIBS})

